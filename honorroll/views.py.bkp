from .forms import HonoreeForm, OrganizationForm, HonorFormSet, HonoreeFormSet
from django.shortcuts import render, redirect, get_object_or_404
from django.views.generic.edit import FormView, CreateView, UpdateView, DeleteView
from django.views.generic.list import ListView
from django.core.urlresolvers import reverse_lazy
from .models import Honoree, Honor, Organization
from django import forms
from django.forms.models import inlineformset_factory

# Basic Views
def home(request):
    return render(request,"home.html",{"data":""})

def about(request):
    return render(request,"about.html",{"data":""})

# class TheView(CreateView):
#     template_name = "honor_form.html"
    

class ManageHonoreeView(CreateView):
    template_name = "honor_form.html"
    form_class = OrganizationForm

    def get_context_data(self, **kwargs):
        context = super(ManageHonoreeView, self).get_context_data(**kwargs)
        instance = None
        organization_pk = self.kwargs.get('pk')
        if organization_pk:
            instance = get_object_or_404(Organization, pk=organization_pk)
        if self.request.POST:
            context['form'] = OrganizationForm(self.request.POST, instance=instance)
            context['formset'] = HonoreeFormSet(self.request.POST, instance=instance)
        else:
            context['form'] = OrganizationForm(instance=instance)
            context['formset'] = HonoreeFormSet(instance=instance)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        form = context['form']
        formset = context['formset']
        if form.is_valid() and formset.is_valid():
            self.object = form.save()
            formset.instance = self.object
            formset.save()
            return redirect(self.object.get_absolute_url())
        else:
            return self.render_to_response(self.get_context_data(form=form))

class ManageHonorView(CreateView):
    template_name = "honor_form.html"
    form_class = HonoreeForm

    def get_context_data(self, **kwargs):
        context = super(ManageHonorView, self).get_context_data(**kwargs)
        instance = None
        honoree_pk = self.kwargs.get('pk')
        if honoree_pk:
            instance = get_object_or_404(Honoree, pk=honoree_pk)
        if self.request.POST:
            context['form'] = HonoreeForm(self.request.POST, instance=instance)
            context['formset'] = HonorFormSet(self.request.POST, instance=instance)
        else:
            context['form'] = HonoreeForm(instance=instance)
            context['formset'] = HonorFormSet(instance=instance)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        form = context['form']
        formset = context['formset']
        if form.is_valid() and formset.is_valid():
            self.object = form.save()
            formset.instance = self.object
            formset.save()
            return redirect(self.object.get_absolute_url())
        else:
            return self.render_to_response(self.get_context_data(form=form))

# Organizations
class OrganizationListView(ListView):
    model = Organization

class OrganizationView(FormView):
    template_name = 'organization_form.html'
    form_class = OrganizationForm
    success_url = '/'

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        
#       form.send_email()
        return super(OrganizationView, self).form_valid(form)

class OrganizationCreate(CreateView):
    model = Organization
    fields = ['name']
    success_url = '/organization'

class OrganizationUpdate(UpdateView):
    model = Organization
    fields = ['name']
    success_url = reverse_lazy('organization_list')

class OrganizationDelete(DeleteView):
    model = Organization
    fields = ['name']
    success_url = reverse_lazy('organization_list')

# Honorees
class HonoreeView(FormView):
    template_name = 'honoree_form.html'
    form_class = HonoreeForm
    success_url = '/thanks/'

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        
#		form.send_email()
		return super(HonoreeView, self).form_valid(form)

class HonoreeCreate(CreateView):
    model = Honoree
    fields = ['affiliation','first_name','middle_name','last_name','email','honor']
    
class HonoreeUpdate(UpdateView):
    model = Honoree
    fields = ['affiliation','first_name','middle_name','last_name','email','honor']

class HonoreeDelete(DeleteView):
    model = Honoree
    success_url = reverse_lazy('Honoree-list')
